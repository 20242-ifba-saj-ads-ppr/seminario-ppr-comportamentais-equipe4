@startuml
title Cenário com Iterator

interface Iterador<T> {
  + primeiro(): void
  + proximo(): void
  + acabou(): boolean
  + itemAtual(): T
}

interface Agregado<T> {
  + criarIterador(): Iterador<T>
}

class Trabalhador {
  - nome: String
  + imprimir(): void
}

class ListaTrabalhadores implements Agregado<Trabalhador> {
  - trabalhadores: List<Trabalhador>
  + adicionar(Trabalhador): void
  + obter(int): Trabalhador
  + contar(): int
  + criarIterador(): Iterador<Trabalhador>
}

class IteradorTrabalhadores implements Iterador<Trabalhador> {
  - lista: ListaTrabalhadores
  - atual: int
  + primeiro(): void
  + proximo(): void
  + acabou(): boolean
  + itemAtual(): Trabalhador
}

class Main {
  + main(String[]): void
  + imprimirTrabalhadores(Iterador<Trabalhador>): void
}

Main --> Agregado : usa
ListaTrabalhadores --> Trabalhador : contém
ListaTrabalhadores --> IteradorTrabalhadores : cria
IteradorTrabalhadores --> ListaTrabalhadores : itera
Main --> Iterador : usa

@enduml
